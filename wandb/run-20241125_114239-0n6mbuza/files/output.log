  0%|                                                                                                                            | 0/4 [00:00<?, ?it/s]
data num:8
keys:dict_keys(['input_ids', 'labels'])
data num:8
keys:dict_keys(['input_ids', 'labels'])
data num:8
keys:dict_keys(['input_ids', 'labels'])
data num:8
keys:dict_keys(['input_ids', 'labels'])
data num:8
keys:dict_keys(['input_ids', 'labels'])
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


seg_id:0----------------------------------------------------------------------------------------------------

----------------------------------------------------------------------------------------------------seg_id:0seg_id:0seg_id:0

seg_id:0seg_id:0



seg_id:0


seg_id:0
forward device:cuda:1
forward device:cuda:6forward device:cuda:0

forward device:cuda:3
forward device:cuda:2
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:2')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:1')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:6')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:0')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:3')
forward device:cuda:5
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:5')
forward device:cuda:4forward device:cuda:7

token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:7')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:4')
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8self.num_key_value_groups:8


self.num_key_value_groups:80 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8self.num_key_value_groups:8




self.num_key_value_groups:80 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])



0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])


1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])


query_states:torch.Size([1, 714, 32, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
key_states:torch.Size([1, 714, 4, 64])
query_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
self.num_key_value_groups:8
key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])



0 key_states:torch.Size([1, 714, 4, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

1 key_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])



k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
0 key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
1 key_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])



key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])query_states:torch.Size([1, 714, 32, 64])


self.num_key_value_groups:8key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

self.num_key_value_groups:8k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

0 key_states:torch.Size([1, 714, 4, 64])
query_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])

1 key_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])


q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8self.num_key_value_groups:8query_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])



1 key_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])


self.num_key_value_groups:8
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8key_states:torch.Size([1, 714, 4, 64])



0 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])

self.num_key_value_groups:81 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:81 key_states:torch.Size([1, 714, 32, 64])


q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])


k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])


query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])


self.num_key_value_groups:8k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])


0 key_states:torch.Size([1, 714, 4, 64])query_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])


key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

self.num_key_value_groups:8


k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])

query_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])


0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

query_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

key_states:torch.Size([1, 714, 4, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
self.num_key_value_groups:80 key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

0 key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
1 key_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])


key_states:torch.Size([1, 714, 4, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])


query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])
key_states:torch.Size([1, 714, 4, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:81 key_states:torch.Size([1, 714, 32, 64])

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
0 key_states:torch.Size([1, 714, 4, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

query_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])
0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])


q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])


key_states:torch.Size([1, 714, 4, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])


query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

query_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])
key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])



k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])query_states:torch.Size([1, 714, 32, 64])



query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

self.num_key_value_groups:80 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])


0 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])


k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8


0 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])
0 key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

1 key_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

self.num_key_value_groups:80 key_states:torch.Size([1, 714, 4, 64])

0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])
0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8
key_states:torch.Size([1, 714, 4, 64])

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

query_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
self.num_key_value_groups:8
query_states:torch.Size([1, 714, 32, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])


key_states:torch.Size([1, 714, 4, 64])query_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

query_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
1 key_states:torch.Size([1, 714, 32, 64])
query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8

key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])
query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8query_states:torch.Size([1, 714, 32, 64])


k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8key_states:torch.Size([1, 714, 4, 64])



query_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])


key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
forward device:cuda:1
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:1')
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 77, in <module>
    trainer.train()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 37, in compute_loss
    output = model(inputs=inputs["input_ids"], labels=inputs["labels"], num_items_in_batch=torch.tensor([num_items_in_batch for _ in range(bsz)], dtype=torch.long))
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 193, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 212, in parallel_apply
    return parallel_apply(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 126, in parallel_apply
    output.reraise()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/_utils.py", line 715, in reraise
    raise exception
RuntimeError: Caught RuntimeError in replica 0 on device 0.
Original Traceback (most recent call last):
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 96, in _worker
    output = module(*input, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 558, in forward
    self.past_key_values.update_group_hidden(outputs["new_group_hidden"], self.model.mem_group_pids)
  File "/mnt/zhaorunsong/repository/ReCMLLM/cache.py", line 59, in update_group_hidden
    self.groups_hidden_cache = torch.cat([self.groups_hidden_cache, group_hidden],dim=1)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:1 and cuda:0! (when checking argument for argument tensors in method wrapper_CUDA_cat)
