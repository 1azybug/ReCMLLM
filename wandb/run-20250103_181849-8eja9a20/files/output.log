  0%|                                                                                                                                          | 0/8 [00:00<?, ?it/s][34m[1mwandb[0m: 502 encountered (
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
----------------------------------------------------------------------------------------------------
seg_id:0----------------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------


seg_id:0seg_id:0seg_id:0
[34m[1mwandb[0m: <html><head>
[34m[1mwandb[0m: <meta http-equiv="content-type" content="text/html;charset=utf-8">
[34m[1mwandb[0m: <title>502 Server Error</title>
[34m[1mwandb[0m: </head>
[34m[1mwandb[0m: <body text=#000000 bgcolor=#ffffff>
[34m[1mwandb[0m: <h1>Error: Server Error</h1>
[34m[1mwandb[0m: <h2>The server encountered a temporary error and could not complete your request.<p>Please try again in 30 seconds.</h2>
[34m[1mwandb[0m: <h2></h2>
[34m[1mwandb[0m: </body></html>), retrying request


forward device:cuda:1forward device:cuda:3forward device:cuda:2forward device:cuda:0



token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:1')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:2')
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:0')token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:3')

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
1 key_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:81 key_states:torch.Size([1, 714, 32, 64])

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])0 key_states:torch.Size([1, 714, 4, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])1 key_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])key_states:torch.Size([1, 714, 4, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
1 key_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1
forward device:cuda:3
----------------------------------------------------------------------------------------------------
seg_id:1
forward device:cuda:2
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:3')
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:2')
----------------------------------------------------------------------------------------------------
seg_id:1
forward device:cuda:1
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:1')
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1
forward device:cuda:0
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:2
forward device:cuda:3
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:3
forward device:cuda:3
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:4
forward device:cuda:3
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:5
forward device:cuda:3
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:6
forward device:cuda:3
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:7
forward device:cuda:3
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
Traceback (most recent call last):
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 77, in <module>
    trainer.train()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 37, in compute_loss
    output = model(inputs=inputs["input_ids"], labels=inputs["labels"], num_items_in_batch=torch.tensor([num_items_in_batch for _ in range(bsz)], dtype=torch.long))
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 193, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 212, in parallel_apply
    return parallel_apply(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 126, in parallel_apply
    output.reraise()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/_utils.py", line 715, in reraise
    raise exception
RuntimeError: Caught RuntimeError in replica 0 on device 0.
Original Traceback (most recent call last):
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 96, in _worker
    output = module(*input, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 552, in forward
    outputs = self.model(inputs[:, i*seg_len:(i+1)*seg_len], self.past_key_values)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 448, in forward
    hidden_state = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 202, in LlamaForCausalLM_forward
    hidden_states = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 180, in LlamaModel_forward
    hidden_states = decoder_layer(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 139, in LlamaDecoderLayer_forward
    hidden_states = self.self_attn(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 83, in LlamaAttention_forward
    key_states, value_states = past_key_value.update(key_states, value_states, self.layer_idx)
  File "/mnt/zhaorunsong/repository/ReCMLLM/cache.py", line 92, in update
    return_key_states = torch.cat([self.groups_key_cache[layer_idx], key_states], dim=1)
RuntimeError: Expected all tensors to be on the same device, but found at least two devices, cuda:3 and cuda:0! (when checking argument for argument tensors in method wrapper_CUDA_cat)
