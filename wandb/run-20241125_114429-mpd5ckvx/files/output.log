  0%|                                                                                                                           | 0/32 [00:00<?, ?it/s]
data num:1
keys:dict_keys(['input_ids', 'labels'])
data num:1
keys:dict_keys(['input_ids', 'labels'])
data num:1
keys:dict_keys(['input_ids', 'labels'])
data num:1
keys:dict_keys(['input_ids', 'labels'])
data num:1
keys:dict_keys(['input_ids', 'labels'])
----------------------------------------------------------------------------------------------------
seg_id:0
forward device:cuda:0
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1
forward device:cuda:0
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:2
forward device:cuda:0
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:3
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:4
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:5
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:6
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:7
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 77, in <module>
    trainer.train()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 37, in compute_loss
    output = model(inputs=inputs["input_ids"], labels=inputs["labels"], num_items_in_batch=torch.tensor([num_items_in_batch for _ in range(bsz)], dtype=torch.long))
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/accelerate/utils/operations.py", line 822, in forward
    return model_forward(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/accelerate/utils/operations.py", line 810, in __call__
    return convert_to_fp32(self.model_forward(*args, **kwargs))
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/amp/autocast_mode.py", line 44, in decorate_autocast
    return func(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 552, in forward
    outputs = self.model(inputs[:, i*seg_len:(i+1)*seg_len], self.past_key_values)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 448, in forward
    hidden_state = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 202, in LlamaForCausalLM_forward
    hidden_states = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 180, in LlamaModel_forward
    hidden_states = decoder_layer(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 151, in LlamaDecoderLayer_forward
    hidden_states = self.mlp(hidden_states, token_type=token_type)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 120, in LlamaMLP_forward
    down_proj = self.down_proj(self.act_fn(self.gate_proj(x, token_type=token_type)) * self.up_proj(x, token_type=token_type), token_type=token_type)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 249, in forward
    results = torch.zeros_like(result_base)
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 14.00 MiB. GPU 0 has a total capacity of 23.68 GiB of which 7.81 MiB is free. Including non-PyTorch memory, this process has 23.67 GiB memory in use. Of the allocated memory 23.28 GiB is allocated by PyTorch, and 92.12 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
