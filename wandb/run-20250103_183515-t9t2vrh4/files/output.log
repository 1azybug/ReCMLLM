  0%|                                                                                                                                          | 0/8 [00:00<?, ?it/s]
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
data num:4
keys:dict_keys(['input_ids', 'labels'])
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
----------------------------------------------------------------------------------------------------

seg_id:0/8
seg_id:0/8seg_id:0/8
seg_id:0/8


forward device:cuda:0
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:0')
forward device:cuda:2
token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:2')
forward device:cuda:3forward device:cuda:1

token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:3')token_type:tensor([2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6], device='cuda:1')

q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8

1 key_states:torch.Size([1, 714, 32, 64])0 key_states:torch.Size([1, 714, 4, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])1 key_states:torch.Size([1, 714, 32, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])query_states:torch.Size([1, 714, 32, 64])

query_states:torch.Size([1, 714, 32, 64])key_states:torch.Size([1, 714, 4, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])1 key_states:torch.Size([1, 714, 32, 64])

1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:81 key_states:torch.Size([1, 714, 32, 64])

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])self.num_key_value_groups:8
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
0 key_states:torch.Size([1, 714, 4, 64])
query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1/8
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
forward device:cuda:0query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1/8
forward device:cuda:3
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:3')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])

k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])

query_states:torch.Size([1, 714, 32, 64])query_states:torch.Size([1, 714, 32, 64])

key_states:torch.Size([1, 714, 4, 64])key_states:torch.Size([1, 714, 4, 64])

self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])self.num_key_value_groups:8

0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
q_cos:torch.Size([1, 714, 64]),q_sin:torch.Size([1, 714, 64])
k_cos:torch.Size([1, 714, 64]),k_sin:torch.Size([1, 714, 64])
query_states:torch.Size([1, 714, 32, 64])
key_states:torch.Size([1, 714, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 714, 4, 64])
1 key_states:torch.Size([1, 714, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1/8
forward device:cuda:2
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:1/8
forward device:cuda:1
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:2')
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:1')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 918, 64]),k_sin:torch.Size([1, 918, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 918, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 918, 4, 64])
1 key_states:torch.Size([1, 918, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:2/8
forward device:cuda:0
token_type:tensor([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
        0, 0, 0, 0, 0, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
        2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6,
        6, 6, 6, 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
q_cos:torch.Size([1, 918, 64]),q_sin:torch.Size([1, 918, 64])
k_cos:torch.Size([1, 1122, 64]),k_sin:torch.Size([1, 1122, 64])
query_states:torch.Size([1, 918, 32, 64])
key_states:torch.Size([1, 1122, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1122, 4, 64])
1 key_states:torch.Size([1, 1122, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:3/8
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:4/8
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:5/8
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:6/8
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
----------------------------------------------------------------------------------------------------
seg_id:7/8
forward device:cuda:0
token_type:tensor([0, 0, 0,  ..., 6, 6, 6], device='cuda:0')
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
q_cos:torch.Size([1, 1122, 64]),q_sin:torch.Size([1, 1122, 64])
k_cos:torch.Size([1, 1530, 64]),k_sin:torch.Size([1, 1530, 64])
query_states:torch.Size([1, 1122, 32, 64])
key_states:torch.Size([1, 1530, 4, 64])
self.num_key_value_groups:8
0 key_states:torch.Size([1, 1530, 4, 64])
1 key_states:torch.Size([1, 1530, 32, 64])
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 77, in <module>
    trainer.train()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2123, in train
    return inner_training_loop(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 2481, in _inner_training_loop
    tr_loss_step = self.training_step(model, inputs, num_items_in_batch)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/transformers/trainer.py", line 3579, in training_step
    loss = self.compute_loss(model, inputs, num_items_in_batch=num_items_in_batch)
  File "/mnt/zhaorunsong/repository/ReCMLLM/train.py", line 37, in compute_loss
    output = model(inputs=inputs["input_ids"], labels=inputs["labels"], num_items_in_batch=torch.tensor([num_items_in_batch for _ in range(bsz)], dtype=torch.long))
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 193, in forward
    outputs = self.parallel_apply(replicas, inputs, module_kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/data_parallel.py", line 212, in parallel_apply
    return parallel_apply(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 126, in parallel_apply
    output.reraise()
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/_utils.py", line 715, in reraise
    raise exception
torch.OutOfMemoryError: Caught OutOfMemoryError in replica 0 on device 0.
Original Traceback (most recent call last):
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/parallel/parallel_apply.py", line 96, in _worker
    output = module(*input, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 552, in forward
    outputs = self.model(inputs[:, i*seg_len:(i+1)*seg_len], self.past_key_values)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 448, in forward
    hidden_state = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 202, in LlamaForCausalLM_forward
    hidden_states = self.model(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 180, in LlamaModel_forward
    hidden_states = decoder_layer(
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 151, in LlamaDecoderLayer_forward
    hidden_states = self.mlp(hidden_states, token_type=token_type)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 120, in LlamaMLP_forward
    down_proj = self.down_proj(self.act_fn(self.gate_proj(x, token_type=token_type)) * self.up_proj(x, token_type=token_type), token_type=token_type)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1736, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
  File "/mnt/zhaorunsong/anaconda3/envs/ReCMLLM/lib/python3.10/site-packages/torch/nn/modules/module.py", line 1747, in _call_impl
    return forward_call(*args, **kwargs)
  File "/mnt/zhaorunsong/repository/ReCMLLM/modeling.py", line 254, in forward
    results[:,expert_mask,...] = result_base[:,expert_mask,...] + self.scale*(x[:,expert_mask,...]@self.lora_A[expert]@self.lora_B[expert])
torch.OutOfMemoryError: CUDA out of memory. Tried to allocate 20.00 MiB. GPU 0 has a total capacity of 23.68 GiB of which 3.81 MiB is free. Including non-PyTorch memory, this process has 23.67 GiB memory in use. Of the allocated memory 23.18 GiB is allocated by PyTorch, and 82.00 MiB is reserved by PyTorch but unallocated. If reserved but unallocated memory is large try setting PYTORCH_CUDA_ALLOC_CONF=expandable_segments:True to avoid fragmentation.  See documentation for Memory Management  (https://pytorch.org/docs/stable/notes/cuda.html#environment-variables)
